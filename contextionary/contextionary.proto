syntax = "proto3";

package contextionary;

service Contextionary {
  rpc IsWordStopword(Word) returns (WordStopword) {}
  rpc IsWordPresent(Word) returns (WordPresent) {}
  rpc SchemaSearch(SchemaSearchParams) returns (SchemaSearchResults) {}
  rpc SafeGetSimilarWordsWithCertainty(SimilarWordsParams) returns (SimilarWordsResults) {}
  rpc VectorForWord(Word) returns (Vector) {}
  rpc VectorForCorpi(Corpi) returns (Vector) {}
  rpc NearestWordsByVector(VectorNNParams) returns (NearestWords) {}
  rpc Meta(MetaParams) returns (MetaOverview) {}
}

message MetaParams {}

message MetaOverview {
  string version = 1;
  string wordCount = 2;
}

message Word {
 string word = 1;
}

message WordPresent {
 bool present = 1;
}

message Vector {
  repeated VectorEntry entries = 1;
}

message VectorEntry {
  float Entry = 1;
}

message VectorNNParams {
  Vector vector = 1;
  int32 k = 2;
  int32 n = 3;
}

message Corpi {
  repeated string corpi = 1;
}

message WordStopword {
 bool stopword = 1;
}

message SimilarWordsParams {
  string word = 1;
  float certainty = 2;
}

message SimilarWordsResults {
  repeated Word words = 1;
}

message NearestWords {
  repeated string words = 1;
  repeated float distances = 2;
}

message Keyword {
  string keyword = 1;
  float weight = 2;
}

enum SearchType {
  CLASS=0;
  PROPERTY=1;
};

enum Kind {
  THING=0;
  ACTION=1;
}

message SchemaSearchParams {
  SearchType searchType = 1;
  string name = 2;
  repeated Keyword keywords = 3;
  Kind kind = 4;
  float certainty = 5;
}

message SchemaSearchResults {
  SearchType type = 1;
  repeated SchemaSearchResult results = 2;
}

message SchemaSearchResult {
  string name = 1;
  Kind kind = 2;
  float certainty = 3;
}
