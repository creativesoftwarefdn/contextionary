// Code generated by protoc-gen-go. DO NOT EDIT.
// source: contextionary.proto

/*
Package contextionary is a generated protocol buffer package.

It is generated from these files:
	contextionary.proto

It has these top-level messages:
	ExtensionInput
	AddExtensionResult
	MetaParams
	MetaOverview
	Word
	WordList
	WordPresent
	Vector
	VectorList
	VectorEntry
	VectorNNParams
	Corpi
	Override
	WordStopword
	SimilarWordsParams
	SimilarWordsResults
	NearestWords
	Keyword
	SchemaSearchParams
	SchemaSearchResults
	SchemaSearchResult
*/
package contextionary

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SearchType int32

const (
	SearchType_CLASS    SearchType = 0
	SearchType_PROPERTY SearchType = 1
)

var SearchType_name = map[int32]string{
	0: "CLASS",
	1: "PROPERTY",
}
var SearchType_value = map[string]int32{
	"CLASS":    0,
	"PROPERTY": 1,
}

func (x SearchType) String() string {
	return proto.EnumName(SearchType_name, int32(x))
}
func (SearchType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Kind int32

const (
	Kind_THING  Kind = 0
	Kind_ACTION Kind = 1
)

var Kind_name = map[int32]string{
	0: "THING",
	1: "ACTION",
}
var Kind_value = map[string]int32{
	"THING":  0,
	"ACTION": 1,
}

func (x Kind) String() string {
	return proto.EnumName(Kind_name, int32(x))
}
func (Kind) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ExtensionInput struct {
	Concept    string  `protobuf:"bytes,1,opt,name=concept" json:"concept,omitempty"`
	Definition string  `protobuf:"bytes,2,opt,name=definition" json:"definition,omitempty"`
	Weight     float32 `protobuf:"fixed32,3,opt,name=weight" json:"weight,omitempty"`
}

func (m *ExtensionInput) Reset()                    { *m = ExtensionInput{} }
func (m *ExtensionInput) String() string            { return proto.CompactTextString(m) }
func (*ExtensionInput) ProtoMessage()               {}
func (*ExtensionInput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ExtensionInput) GetConcept() string {
	if m != nil {
		return m.Concept
	}
	return ""
}

func (m *ExtensionInput) GetDefinition() string {
	if m != nil {
		return m.Definition
	}
	return ""
}

func (m *ExtensionInput) GetWeight() float32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

type AddExtensionResult struct {
}

func (m *AddExtensionResult) Reset()                    { *m = AddExtensionResult{} }
func (m *AddExtensionResult) String() string            { return proto.CompactTextString(m) }
func (*AddExtensionResult) ProtoMessage()               {}
func (*AddExtensionResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type MetaParams struct {
}

func (m *MetaParams) Reset()                    { *m = MetaParams{} }
func (m *MetaParams) String() string            { return proto.CompactTextString(m) }
func (*MetaParams) ProtoMessage()               {}
func (*MetaParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type MetaOverview struct {
	Version   string `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	WordCount int64  `protobuf:"varint,2,opt,name=wordCount" json:"wordCount,omitempty"`
}

func (m *MetaOverview) Reset()                    { *m = MetaOverview{} }
func (m *MetaOverview) String() string            { return proto.CompactTextString(m) }
func (*MetaOverview) ProtoMessage()               {}
func (*MetaOverview) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *MetaOverview) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *MetaOverview) GetWordCount() int64 {
	if m != nil {
		return m.WordCount
	}
	return 0
}

type Word struct {
	Word string `protobuf:"bytes,1,opt,name=word" json:"word,omitempty"`
}

func (m *Word) Reset()                    { *m = Word{} }
func (m *Word) String() string            { return proto.CompactTextString(m) }
func (*Word) ProtoMessage()               {}
func (*Word) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Word) GetWord() string {
	if m != nil {
		return m.Word
	}
	return ""
}

type WordList struct {
	Words []*Word `protobuf:"bytes,1,rep,name=words" json:"words,omitempty"`
}

func (m *WordList) Reset()                    { *m = WordList{} }
func (m *WordList) String() string            { return proto.CompactTextString(m) }
func (*WordList) ProtoMessage()               {}
func (*WordList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *WordList) GetWords() []*Word {
	if m != nil {
		return m.Words
	}
	return nil
}

type WordPresent struct {
	Present bool `protobuf:"varint,1,opt,name=present" json:"present,omitempty"`
}

func (m *WordPresent) Reset()                    { *m = WordPresent{} }
func (m *WordPresent) String() string            { return proto.CompactTextString(m) }
func (*WordPresent) ProtoMessage()               {}
func (*WordPresent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *WordPresent) GetPresent() bool {
	if m != nil {
		return m.Present
	}
	return false
}

type Vector struct {
	Entries    []*VectorEntry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
	Occurrence uint64         `protobuf:"varint,2,opt,name=occurrence" json:"occurrence,omitempty"`
}

func (m *Vector) Reset()                    { *m = Vector{} }
func (m *Vector) String() string            { return proto.CompactTextString(m) }
func (*Vector) ProtoMessage()               {}
func (*Vector) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Vector) GetEntries() []*VectorEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func (m *Vector) GetOccurrence() uint64 {
	if m != nil {
		return m.Occurrence
	}
	return 0
}

type VectorList struct {
	Vectors []*Vector `protobuf:"bytes,1,rep,name=vectors" json:"vectors,omitempty"`
}

func (m *VectorList) Reset()                    { *m = VectorList{} }
func (m *VectorList) String() string            { return proto.CompactTextString(m) }
func (*VectorList) ProtoMessage()               {}
func (*VectorList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *VectorList) GetVectors() []*Vector {
	if m != nil {
		return m.Vectors
	}
	return nil
}

type VectorEntry struct {
	Entry float32 `protobuf:"fixed32,1,opt,name=Entry" json:"Entry,omitempty"`
}

func (m *VectorEntry) Reset()                    { *m = VectorEntry{} }
func (m *VectorEntry) String() string            { return proto.CompactTextString(m) }
func (*VectorEntry) ProtoMessage()               {}
func (*VectorEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *VectorEntry) GetEntry() float32 {
	if m != nil {
		return m.Entry
	}
	return 0
}

type VectorNNParams struct {
	Vector *Vector `protobuf:"bytes,1,opt,name=vector" json:"vector,omitempty"`
	K      int32   `protobuf:"varint,2,opt,name=k" json:"k,omitempty"`
	N      int32   `protobuf:"varint,3,opt,name=n" json:"n,omitempty"`
}

func (m *VectorNNParams) Reset()                    { *m = VectorNNParams{} }
func (m *VectorNNParams) String() string            { return proto.CompactTextString(m) }
func (*VectorNNParams) ProtoMessage()               {}
func (*VectorNNParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *VectorNNParams) GetVector() *Vector {
	if m != nil {
		return m.Vector
	}
	return nil
}

func (m *VectorNNParams) GetK() int32 {
	if m != nil {
		return m.K
	}
	return 0
}

func (m *VectorNNParams) GetN() int32 {
	if m != nil {
		return m.N
	}
	return 0
}

type Corpi struct {
	Corpi     []string    `protobuf:"bytes,1,rep,name=corpi" json:"corpi,omitempty"`
	Overrides []*Override `protobuf:"bytes,2,rep,name=overrides" json:"overrides,omitempty"`
}

func (m *Corpi) Reset()                    { *m = Corpi{} }
func (m *Corpi) String() string            { return proto.CompactTextString(m) }
func (*Corpi) ProtoMessage()               {}
func (*Corpi) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Corpi) GetCorpi() []string {
	if m != nil {
		return m.Corpi
	}
	return nil
}

func (m *Corpi) GetOverrides() []*Override {
	if m != nil {
		return m.Overrides
	}
	return nil
}

type Override struct {
	Word       string `protobuf:"bytes,1,opt,name=word" json:"word,omitempty"`
	Expression string `protobuf:"bytes,2,opt,name=expression" json:"expression,omitempty"`
}

func (m *Override) Reset()                    { *m = Override{} }
func (m *Override) String() string            { return proto.CompactTextString(m) }
func (*Override) ProtoMessage()               {}
func (*Override) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Override) GetWord() string {
	if m != nil {
		return m.Word
	}
	return ""
}

func (m *Override) GetExpression() string {
	if m != nil {
		return m.Expression
	}
	return ""
}

type WordStopword struct {
	Stopword bool `protobuf:"varint,1,opt,name=stopword" json:"stopword,omitempty"`
}

func (m *WordStopword) Reset()                    { *m = WordStopword{} }
func (m *WordStopword) String() string            { return proto.CompactTextString(m) }
func (*WordStopword) ProtoMessage()               {}
func (*WordStopword) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *WordStopword) GetStopword() bool {
	if m != nil {
		return m.Stopword
	}
	return false
}

type SimilarWordsParams struct {
	Word      string  `protobuf:"bytes,1,opt,name=word" json:"word,omitempty"`
	Certainty float32 `protobuf:"fixed32,2,opt,name=certainty" json:"certainty,omitempty"`
}

func (m *SimilarWordsParams) Reset()                    { *m = SimilarWordsParams{} }
func (m *SimilarWordsParams) String() string            { return proto.CompactTextString(m) }
func (*SimilarWordsParams) ProtoMessage()               {}
func (*SimilarWordsParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *SimilarWordsParams) GetWord() string {
	if m != nil {
		return m.Word
	}
	return ""
}

func (m *SimilarWordsParams) GetCertainty() float32 {
	if m != nil {
		return m.Certainty
	}
	return 0
}

type SimilarWordsResults struct {
	Words []*Word `protobuf:"bytes,1,rep,name=words" json:"words,omitempty"`
}

func (m *SimilarWordsResults) Reset()                    { *m = SimilarWordsResults{} }
func (m *SimilarWordsResults) String() string            { return proto.CompactTextString(m) }
func (*SimilarWordsResults) ProtoMessage()               {}
func (*SimilarWordsResults) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *SimilarWordsResults) GetWords() []*Word {
	if m != nil {
		return m.Words
	}
	return nil
}

type NearestWords struct {
	Words     []string  `protobuf:"bytes,1,rep,name=words" json:"words,omitempty"`
	Distances []float32 `protobuf:"fixed32,2,rep,packed,name=distances" json:"distances,omitempty"`
}

func (m *NearestWords) Reset()                    { *m = NearestWords{} }
func (m *NearestWords) String() string            { return proto.CompactTextString(m) }
func (*NearestWords) ProtoMessage()               {}
func (*NearestWords) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *NearestWords) GetWords() []string {
	if m != nil {
		return m.Words
	}
	return nil
}

func (m *NearestWords) GetDistances() []float32 {
	if m != nil {
		return m.Distances
	}
	return nil
}

type Keyword struct {
	Keyword string  `protobuf:"bytes,1,opt,name=keyword" json:"keyword,omitempty"`
	Weight  float32 `protobuf:"fixed32,2,opt,name=weight" json:"weight,omitempty"`
}

func (m *Keyword) Reset()                    { *m = Keyword{} }
func (m *Keyword) String() string            { return proto.CompactTextString(m) }
func (*Keyword) ProtoMessage()               {}
func (*Keyword) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *Keyword) GetKeyword() string {
	if m != nil {
		return m.Keyword
	}
	return ""
}

func (m *Keyword) GetWeight() float32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

type SchemaSearchParams struct {
	SearchType SearchType `protobuf:"varint,1,opt,name=searchType,enum=contextionary.SearchType" json:"searchType,omitempty"`
	Name       string     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Keywords   []*Keyword `protobuf:"bytes,3,rep,name=keywords" json:"keywords,omitempty"`
	Kind       Kind       `protobuf:"varint,4,opt,name=kind,enum=contextionary.Kind" json:"kind,omitempty"`
	Certainty  float32    `protobuf:"fixed32,5,opt,name=certainty" json:"certainty,omitempty"`
}

func (m *SchemaSearchParams) Reset()                    { *m = SchemaSearchParams{} }
func (m *SchemaSearchParams) String() string            { return proto.CompactTextString(m) }
func (*SchemaSearchParams) ProtoMessage()               {}
func (*SchemaSearchParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *SchemaSearchParams) GetSearchType() SearchType {
	if m != nil {
		return m.SearchType
	}
	return SearchType_CLASS
}

func (m *SchemaSearchParams) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SchemaSearchParams) GetKeywords() []*Keyword {
	if m != nil {
		return m.Keywords
	}
	return nil
}

func (m *SchemaSearchParams) GetKind() Kind {
	if m != nil {
		return m.Kind
	}
	return Kind_THING
}

func (m *SchemaSearchParams) GetCertainty() float32 {
	if m != nil {
		return m.Certainty
	}
	return 0
}

type SchemaSearchResults struct {
	Type    SearchType            `protobuf:"varint,1,opt,name=type,enum=contextionary.SearchType" json:"type,omitempty"`
	Results []*SchemaSearchResult `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
}

func (m *SchemaSearchResults) Reset()                    { *m = SchemaSearchResults{} }
func (m *SchemaSearchResults) String() string            { return proto.CompactTextString(m) }
func (*SchemaSearchResults) ProtoMessage()               {}
func (*SchemaSearchResults) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *SchemaSearchResults) GetType() SearchType {
	if m != nil {
		return m.Type
	}
	return SearchType_CLASS
}

func (m *SchemaSearchResults) GetResults() []*SchemaSearchResult {
	if m != nil {
		return m.Results
	}
	return nil
}

type SchemaSearchResult struct {
	Name      string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Kind      Kind    `protobuf:"varint,2,opt,name=kind,enum=contextionary.Kind" json:"kind,omitempty"`
	Certainty float32 `protobuf:"fixed32,3,opt,name=certainty" json:"certainty,omitempty"`
}

func (m *SchemaSearchResult) Reset()                    { *m = SchemaSearchResult{} }
func (m *SchemaSearchResult) String() string            { return proto.CompactTextString(m) }
func (*SchemaSearchResult) ProtoMessage()               {}
func (*SchemaSearchResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *SchemaSearchResult) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SchemaSearchResult) GetKind() Kind {
	if m != nil {
		return m.Kind
	}
	return Kind_THING
}

func (m *SchemaSearchResult) GetCertainty() float32 {
	if m != nil {
		return m.Certainty
	}
	return 0
}

func init() {
	proto.RegisterType((*ExtensionInput)(nil), "contextionary.ExtensionInput")
	proto.RegisterType((*AddExtensionResult)(nil), "contextionary.AddExtensionResult")
	proto.RegisterType((*MetaParams)(nil), "contextionary.MetaParams")
	proto.RegisterType((*MetaOverview)(nil), "contextionary.MetaOverview")
	proto.RegisterType((*Word)(nil), "contextionary.Word")
	proto.RegisterType((*WordList)(nil), "contextionary.WordList")
	proto.RegisterType((*WordPresent)(nil), "contextionary.WordPresent")
	proto.RegisterType((*Vector)(nil), "contextionary.Vector")
	proto.RegisterType((*VectorList)(nil), "contextionary.VectorList")
	proto.RegisterType((*VectorEntry)(nil), "contextionary.VectorEntry")
	proto.RegisterType((*VectorNNParams)(nil), "contextionary.VectorNNParams")
	proto.RegisterType((*Corpi)(nil), "contextionary.Corpi")
	proto.RegisterType((*Override)(nil), "contextionary.Override")
	proto.RegisterType((*WordStopword)(nil), "contextionary.WordStopword")
	proto.RegisterType((*SimilarWordsParams)(nil), "contextionary.SimilarWordsParams")
	proto.RegisterType((*SimilarWordsResults)(nil), "contextionary.SimilarWordsResults")
	proto.RegisterType((*NearestWords)(nil), "contextionary.NearestWords")
	proto.RegisterType((*Keyword)(nil), "contextionary.Keyword")
	proto.RegisterType((*SchemaSearchParams)(nil), "contextionary.SchemaSearchParams")
	proto.RegisterType((*SchemaSearchResults)(nil), "contextionary.SchemaSearchResults")
	proto.RegisterType((*SchemaSearchResult)(nil), "contextionary.SchemaSearchResult")
	proto.RegisterEnum("contextionary.SearchType", SearchType_name, SearchType_value)
	proto.RegisterEnum("contextionary.Kind", Kind_name, Kind_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Contextionary service

type ContextionaryClient interface {
	IsWordStopword(ctx context.Context, in *Word, opts ...grpc.CallOption) (*WordStopword, error)
	IsWordPresent(ctx context.Context, in *Word, opts ...grpc.CallOption) (*WordPresent, error)
	SchemaSearch(ctx context.Context, in *SchemaSearchParams, opts ...grpc.CallOption) (*SchemaSearchResults, error)
	SafeGetSimilarWordsWithCertainty(ctx context.Context, in *SimilarWordsParams, opts ...grpc.CallOption) (*SimilarWordsResults, error)
	VectorForWord(ctx context.Context, in *Word, opts ...grpc.CallOption) (*Vector, error)
	MultiVectorForWord(ctx context.Context, in *WordList, opts ...grpc.CallOption) (*VectorList, error)
	VectorForCorpi(ctx context.Context, in *Corpi, opts ...grpc.CallOption) (*Vector, error)
	NearestWordsByVector(ctx context.Context, in *VectorNNParams, opts ...grpc.CallOption) (*NearestWords, error)
	Meta(ctx context.Context, in *MetaParams, opts ...grpc.CallOption) (*MetaOverview, error)
	AddExtension(ctx context.Context, in *ExtensionInput, opts ...grpc.CallOption) (*AddExtensionResult, error)
}

type contextionaryClient struct {
	cc *grpc.ClientConn
}

func NewContextionaryClient(cc *grpc.ClientConn) ContextionaryClient {
	return &contextionaryClient{cc}
}

func (c *contextionaryClient) IsWordStopword(ctx context.Context, in *Word, opts ...grpc.CallOption) (*WordStopword, error) {
	out := new(WordStopword)
	err := grpc.Invoke(ctx, "/contextionary.Contextionary/IsWordStopword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextionaryClient) IsWordPresent(ctx context.Context, in *Word, opts ...grpc.CallOption) (*WordPresent, error) {
	out := new(WordPresent)
	err := grpc.Invoke(ctx, "/contextionary.Contextionary/IsWordPresent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextionaryClient) SchemaSearch(ctx context.Context, in *SchemaSearchParams, opts ...grpc.CallOption) (*SchemaSearchResults, error) {
	out := new(SchemaSearchResults)
	err := grpc.Invoke(ctx, "/contextionary.Contextionary/SchemaSearch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextionaryClient) SafeGetSimilarWordsWithCertainty(ctx context.Context, in *SimilarWordsParams, opts ...grpc.CallOption) (*SimilarWordsResults, error) {
	out := new(SimilarWordsResults)
	err := grpc.Invoke(ctx, "/contextionary.Contextionary/SafeGetSimilarWordsWithCertainty", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextionaryClient) VectorForWord(ctx context.Context, in *Word, opts ...grpc.CallOption) (*Vector, error) {
	out := new(Vector)
	err := grpc.Invoke(ctx, "/contextionary.Contextionary/VectorForWord", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextionaryClient) MultiVectorForWord(ctx context.Context, in *WordList, opts ...grpc.CallOption) (*VectorList, error) {
	out := new(VectorList)
	err := grpc.Invoke(ctx, "/contextionary.Contextionary/MultiVectorForWord", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextionaryClient) VectorForCorpi(ctx context.Context, in *Corpi, opts ...grpc.CallOption) (*Vector, error) {
	out := new(Vector)
	err := grpc.Invoke(ctx, "/contextionary.Contextionary/VectorForCorpi", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextionaryClient) NearestWordsByVector(ctx context.Context, in *VectorNNParams, opts ...grpc.CallOption) (*NearestWords, error) {
	out := new(NearestWords)
	err := grpc.Invoke(ctx, "/contextionary.Contextionary/NearestWordsByVector", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextionaryClient) Meta(ctx context.Context, in *MetaParams, opts ...grpc.CallOption) (*MetaOverview, error) {
	out := new(MetaOverview)
	err := grpc.Invoke(ctx, "/contextionary.Contextionary/Meta", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextionaryClient) AddExtension(ctx context.Context, in *ExtensionInput, opts ...grpc.CallOption) (*AddExtensionResult, error) {
	out := new(AddExtensionResult)
	err := grpc.Invoke(ctx, "/contextionary.Contextionary/AddExtension", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Contextionary service

type ContextionaryServer interface {
	IsWordStopword(context.Context, *Word) (*WordStopword, error)
	IsWordPresent(context.Context, *Word) (*WordPresent, error)
	SchemaSearch(context.Context, *SchemaSearchParams) (*SchemaSearchResults, error)
	SafeGetSimilarWordsWithCertainty(context.Context, *SimilarWordsParams) (*SimilarWordsResults, error)
	VectorForWord(context.Context, *Word) (*Vector, error)
	MultiVectorForWord(context.Context, *WordList) (*VectorList, error)
	VectorForCorpi(context.Context, *Corpi) (*Vector, error)
	NearestWordsByVector(context.Context, *VectorNNParams) (*NearestWords, error)
	Meta(context.Context, *MetaParams) (*MetaOverview, error)
	AddExtension(context.Context, *ExtensionInput) (*AddExtensionResult, error)
}

func RegisterContextionaryServer(s *grpc.Server, srv ContextionaryServer) {
	s.RegisterService(&_Contextionary_serviceDesc, srv)
}

func _Contextionary_IsWordStopword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Word)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextionaryServer).IsWordStopword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contextionary.Contextionary/IsWordStopword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextionaryServer).IsWordStopword(ctx, req.(*Word))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contextionary_IsWordPresent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Word)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextionaryServer).IsWordPresent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contextionary.Contextionary/IsWordPresent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextionaryServer).IsWordPresent(ctx, req.(*Word))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contextionary_SchemaSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchemaSearchParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextionaryServer).SchemaSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contextionary.Contextionary/SchemaSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextionaryServer).SchemaSearch(ctx, req.(*SchemaSearchParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contextionary_SafeGetSimilarWordsWithCertainty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimilarWordsParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextionaryServer).SafeGetSimilarWordsWithCertainty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contextionary.Contextionary/SafeGetSimilarWordsWithCertainty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextionaryServer).SafeGetSimilarWordsWithCertainty(ctx, req.(*SimilarWordsParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contextionary_VectorForWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Word)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextionaryServer).VectorForWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contextionary.Contextionary/VectorForWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextionaryServer).VectorForWord(ctx, req.(*Word))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contextionary_MultiVectorForWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WordList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextionaryServer).MultiVectorForWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contextionary.Contextionary/MultiVectorForWord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextionaryServer).MultiVectorForWord(ctx, req.(*WordList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contextionary_VectorForCorpi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Corpi)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextionaryServer).VectorForCorpi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contextionary.Contextionary/VectorForCorpi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextionaryServer).VectorForCorpi(ctx, req.(*Corpi))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contextionary_NearestWordsByVector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VectorNNParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextionaryServer).NearestWordsByVector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contextionary.Contextionary/NearestWordsByVector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextionaryServer).NearestWordsByVector(ctx, req.(*VectorNNParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contextionary_Meta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetaParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextionaryServer).Meta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contextionary.Contextionary/Meta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextionaryServer).Meta(ctx, req.(*MetaParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contextionary_AddExtension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtensionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextionaryServer).AddExtension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contextionary.Contextionary/AddExtension",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextionaryServer).AddExtension(ctx, req.(*ExtensionInput))
	}
	return interceptor(ctx, in, info, handler)
}

var _Contextionary_serviceDesc = grpc.ServiceDesc{
	ServiceName: "contextionary.Contextionary",
	HandlerType: (*ContextionaryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsWordStopword",
			Handler:    _Contextionary_IsWordStopword_Handler,
		},
		{
			MethodName: "IsWordPresent",
			Handler:    _Contextionary_IsWordPresent_Handler,
		},
		{
			MethodName: "SchemaSearch",
			Handler:    _Contextionary_SchemaSearch_Handler,
		},
		{
			MethodName: "SafeGetSimilarWordsWithCertainty",
			Handler:    _Contextionary_SafeGetSimilarWordsWithCertainty_Handler,
		},
		{
			MethodName: "VectorForWord",
			Handler:    _Contextionary_VectorForWord_Handler,
		},
		{
			MethodName: "MultiVectorForWord",
			Handler:    _Contextionary_MultiVectorForWord_Handler,
		},
		{
			MethodName: "VectorForCorpi",
			Handler:    _Contextionary_VectorForCorpi_Handler,
		},
		{
			MethodName: "NearestWordsByVector",
			Handler:    _Contextionary_NearestWordsByVector_Handler,
		},
		{
			MethodName: "Meta",
			Handler:    _Contextionary_Meta_Handler,
		},
		{
			MethodName: "AddExtension",
			Handler:    _Contextionary_AddExtension_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contextionary.proto",
}

func init() { proto.RegisterFile("contextionary.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 936 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0x6d, 0x6f, 0x1b, 0x45,
	0x10, 0xbe, 0x73, 0xfc, 0x3a, 0x71, 0xa2, 0x68, 0x12, 0xda, 0xab, 0x69, 0x51, 0x58, 0x84, 0x1a,
	0x22, 0xb5, 0x48, 0x81, 0x7e, 0x40, 0x55, 0xa1, 0x89, 0x49, 0x4a, 0x68, 0xeb, 0x44, 0x6b, 0x8b,
	0x08, 0x21, 0x21, 0x5d, 0xef, 0xb6, 0x64, 0xe5, 0x64, 0xcf, 0xda, 0x5d, 0x27, 0xf1, 0x47, 0x7e,
	0x05, 0xff, 0x8e, 0xdf, 0x82, 0x76, 0x6f, 0xd7, 0x3e, 0x9f, 0xaf, 0x40, 0xbf, 0xed, 0xcc, 0x3e,
	0xf3, 0xf6, 0xcc, 0xbe, 0x0c, 0x6c, 0x27, 0x99, 0xd0, 0xec, 0x4e, 0xf3, 0x4c, 0xc4, 0x72, 0xf6,
	0x74, 0x22, 0x33, 0x9d, 0xe1, 0xc6, 0x92, 0x92, 0xbc, 0x83, 0xcd, 0xe3, 0x3b, 0xcd, 0x84, 0xe2,
	0x99, 0x38, 0x15, 0x93, 0xa9, 0xc6, 0x08, 0x5a, 0x49, 0x26, 0x12, 0x36, 0xd1, 0x51, 0xb8, 0x1b,
	0xee, 0x75, 0xa8, 0x17, 0xf1, 0x33, 0x80, 0x94, 0xbd, 0xe7, 0x82, 0x1b, 0xe3, 0xa8, 0x66, 0x37,
	0x0b, 0x1a, 0xbc, 0x07, 0xcd, 0x5b, 0xc6, 0xff, 0xb8, 0xd4, 0xd1, 0xda, 0x6e, 0xb8, 0x57, 0xa3,
	0x4e, 0x22, 0x3b, 0x80, 0x87, 0x69, 0x3a, 0x0f, 0x43, 0x99, 0x9a, 0x5e, 0x69, 0xd2, 0x05, 0x78,
	0xcb, 0x74, 0x7c, 0x1e, 0xcb, 0xf8, 0x5a, 0x91, 0x13, 0xe8, 0x1a, 0xe9, 0xec, 0x86, 0xc9, 0x1b,
	0xce, 0x6e, 0x4d, 0x16, 0x37, 0x4c, 0x1a, 0xb8, 0xcf, 0xc2, 0x89, 0xf8, 0x10, 0x3a, 0xb7, 0x99,
	0x4c, 0xfb, 0xd9, 0x54, 0x68, 0x9b, 0xc4, 0x1a, 0x5d, 0x28, 0x48, 0x0f, 0xea, 0x17, 0x99, 0x4c,
	0x11, 0xa1, 0x6e, 0x94, 0xce, 0xd8, 0xae, 0xc9, 0x33, 0x68, 0x9b, 0xbd, 0x37, 0x5c, 0x69, 0xfc,
	0x0a, 0x1a, 0x46, 0xa7, 0xa2, 0x70, 0x77, 0x6d, 0x6f, 0xfd, 0x60, 0xfb, 0xe9, 0x32, 0x57, 0x06,
	0x47, 0x73, 0x04, 0x79, 0x0c, 0xeb, 0x46, 0x3c, 0x97, 0x4c, 0x31, 0x61, 0xf9, 0x99, 0xe4, 0x4b,
	0xeb, 0xbc, 0x4d, 0xbd, 0x48, 0x7e, 0x87, 0xe6, 0x2f, 0x2c, 0xd1, 0x99, 0xc4, 0x6f, 0xa1, 0xc5,
	0x84, 0x96, 0x9c, 0x79, 0xff, 0xbd, 0x92, 0xff, 0x1c, 0x77, 0x2c, 0xb4, 0x9c, 0x51, 0x0f, 0x35,
	0xfc, 0x66, 0x49, 0x32, 0x95, 0x92, 0x89, 0x84, 0xd9, 0xd2, 0xea, 0xb4, 0xa0, 0x21, 0x2f, 0x00,
	0x72, 0x3b, 0x5b, 0xc1, 0xd7, 0x86, 0x21, 0x23, 0xf9, 0x18, 0x9f, 0x54, 0xc6, 0xa0, 0x1e, 0x45,
	0xbe, 0x80, 0xf5, 0x42, 0x58, 0xdc, 0x81, 0x86, 0x5d, 0xd8, 0x2a, 0x6a, 0x34, 0x17, 0xc8, 0x6f,
	0xb0, 0x99, 0x83, 0x06, 0x83, 0xbc, 0x33, 0xf8, 0x04, 0x9a, 0xb9, 0x07, 0x0b, 0xfc, 0x60, 0x18,
	0x07, 0xc2, 0x2e, 0x84, 0x63, 0x9b, 0x7b, 0x83, 0x86, 0x63, 0x23, 0x09, 0x7b, 0x1a, 0x1a, 0x34,
	0x14, 0x64, 0x04, 0x8d, 0x7e, 0x26, 0x27, 0xdc, 0xc4, 0x4e, 0xcc, 0xc2, 0x66, 0xde, 0xa1, 0xb9,
	0x80, 0xcf, 0xa0, 0x93, 0xdd, 0x30, 0x29, 0x79, 0xca, 0x54, 0x54, 0xb3, 0x35, 0xdd, 0x2f, 0x05,
	0x3b, 0x73, 0xfb, 0x74, 0x81, 0x24, 0xdf, 0x43, 0xdb, 0xab, 0xab, 0xda, 0x6e, 0x68, 0x65, 0x77,
	0xa6, 0x47, 0xaa, 0x70, 0x6c, 0x17, 0x1a, 0xb2, 0x0f, 0x5d, 0xd3, 0xdf, 0xa1, 0xce, 0x26, 0x16,
	0xdf, 0x83, 0xb6, 0x72, 0x6b, 0xd7, 0xe1, 0xb9, 0x4c, 0x4e, 0x00, 0x87, 0xfc, 0x9a, 0x5f, 0xc5,
	0xd2, 0x98, 0x28, 0x47, 0x51, 0x55, 0xd4, 0x87, 0xd0, 0x49, 0x98, 0xd4, 0x31, 0x17, 0x7a, 0x66,
	0x83, 0xd6, 0xe8, 0x42, 0x41, 0x5e, 0xc2, 0x76, 0xd1, 0x4f, 0x7e, 0x25, 0xd4, 0xc7, 0x9c, 0xca,
	0x23, 0xe8, 0x0e, 0x58, 0x2c, 0x99, 0xd2, 0xd6, 0x83, 0xa1, 0x74, 0x61, 0xda, 0x71, 0x28, 0x93,
	0x45, 0xca, 0x95, 0x8e, 0x45, 0xe2, 0x28, 0xad, 0xd1, 0x85, 0x82, 0x3c, 0x87, 0xd6, 0x6b, 0x36,
	0xb3, 0xe9, 0x46, 0xd0, 0x1a, 0xe7, 0x4b, 0x7f, 0xdf, 0x9c, 0x58, 0xb8, 0xd5, 0xb5, 0xa5, 0x5b,
	0xfd, 0x77, 0x08, 0x38, 0x4c, 0x2e, 0xd9, 0x75, 0x3c, 0x64, 0xb1, 0x4c, 0x2e, 0x1d, 0x17, 0xdf,
	0x01, 0x28, 0x2b, 0x8f, 0x66, 0x13, 0x66, 0x7d, 0x6d, 0x1e, 0x3c, 0x28, 0xd5, 0x31, 0x9c, 0x03,
	0x68, 0x01, 0x6c, 0x68, 0x14, 0xf1, 0x35, 0x73, 0x2d, 0xb2, 0x6b, 0x3c, 0x80, 0xb6, 0x4b, 0x44,
	0x45, 0x6b, 0x96, 0x94, 0x7b, 0x25, 0x67, 0xae, 0x02, 0x3a, 0xc7, 0xe1, 0x63, 0xa8, 0x8f, 0xb9,
	0x48, 0xa3, 0xba, 0x0d, 0x5e, 0x26, 0xf1, 0x35, 0x17, 0x29, 0xb5, 0x80, 0xe5, 0x1e, 0x35, 0xca,
	0x3d, 0xfa, 0x33, 0x84, 0xed, 0x62, 0x81, 0xbe, 0x49, 0x4f, 0xa0, 0xae, 0xff, 0x57, 0x6d, 0x16,
	0x86, 0xcf, 0xa1, 0x25, 0x73, 0x4b, 0x77, 0xa6, 0x3f, 0x2f, 0x5b, 0xac, 0xc4, 0xa0, 0xde, 0x82,
	0x64, 0xcb, 0x1c, 0xe7, 0xdb, 0x73, 0xa2, 0xc2, 0x02, 0x51, 0xbe, 0xe8, 0xda, 0x47, 0x15, 0xbd,
	0x56, 0x2a, 0x7a, 0xff, 0x4b, 0x80, 0x45, 0x05, 0xd8, 0x81, 0x46, 0xff, 0xcd, 0xe1, 0x70, 0xb8,
	0x15, 0x60, 0x17, 0xda, 0xe7, 0xf4, 0xec, 0xfc, 0x98, 0x8e, 0x7e, 0xdd, 0x0a, 0xf7, 0x1f, 0x41,
	0xdd, 0xb8, 0x34, 0x80, 0xd1, 0x4f, 0xa7, 0x83, 0x57, 0x5b, 0x01, 0x02, 0x34, 0x0f, 0xfb, 0xa3,
	0xd3, 0xb3, 0xc1, 0x56, 0x78, 0xf0, 0x57, 0x13, 0x36, 0xfa, 0xc5, 0x04, 0xf0, 0x47, 0xd8, 0x3c,
	0x55, 0x4b, 0xd7, 0xac, 0xea, 0x70, 0xf7, 0x3e, 0xad, 0x50, 0x7a, 0x0b, 0x12, 0xe0, 0x11, 0x6c,
	0xe4, 0x5e, 0xfc, 0x63, 0x5c, 0xe9, 0xa4, 0x57, 0xa1, 0x74, 0x06, 0x24, 0xc0, 0x0b, 0xe8, 0x16,
	0x29, 0xc5, 0x7f, 0x6b, 0x47, 0x7e, 0xa6, 0x7b, 0xe4, 0x3f, 0x3b, 0xa6, 0x48, 0x80, 0x63, 0xd8,
	0x1d, 0xc6, 0xef, 0xd9, 0x2b, 0xa6, 0x8b, 0x57, 0xfb, 0x82, 0xeb, 0xcb, 0xbe, 0xa7, 0x77, 0x35,
	0xd8, 0xca, 0x63, 0xb2, 0x1a, 0x6c, 0xf5, 0x9d, 0x20, 0x01, 0xbe, 0x80, 0x8d, 0xfc, 0xe1, 0x3d,
	0xc9, 0xec, 0x56, 0x35, 0x13, 0xd5, 0x6f, 0x35, 0x09, 0xf0, 0x67, 0xc0, 0xb7, 0xd3, 0x2b, 0xcd,
	0x97, 0x7d, 0xdc, 0xaf, 0xf0, 0x61, 0xfe, 0x9a, 0xde, 0x83, 0x4a, 0x3f, 0x66, 0x8b, 0x04, 0xf8,
	0x83, 0xff, 0x32, 0x4e, 0x32, 0xe9, 0x9e, 0xf7, 0x12, 0xdc, 0x6a, 0x3f, 0x9c, 0xcc, 0x08, 0x76,
	0x8a, 0x4f, 0xd9, 0xd1, 0xcc, 0xfd, 0xa2, 0x8f, 0x2a, 0x0d, 0xfc, 0xc7, 0xb4, 0x72, 0x56, 0x8a,
	0x3e, 0x48, 0x80, 0x2f, 0xa1, 0x6e, 0x26, 0x0a, 0x2c, 0xe7, 0xbe, 0x18, 0x3a, 0x56, 0x3c, 0x14,
	0x27, 0x10, 0x12, 0x20, 0x85, 0x6e, 0x71, 0x6e, 0x59, 0xc9, 0x67, 0x79, 0x70, 0xea, 0x95, 0x7b,
	0x5b, 0x31, 0xf3, 0x04, 0xef, 0x9a, 0x76, 0x0a, 0xfb, 0xe6, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x91, 0x13, 0xc1, 0x1e, 0x9c, 0x09, 0x00, 0x00,
}
