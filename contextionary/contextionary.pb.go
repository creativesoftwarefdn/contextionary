// Code generated by protoc-gen-go. DO NOT EDIT.
// source: contextionary.proto

package contextionary

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Void struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Void) Reset()         { *m = Void{} }
func (m *Void) String() string { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()    {}
func (*Void) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6af9fd695f521f0, []int{0}
}

func (m *Void) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Void.Unmarshal(m, b)
}
func (m *Void) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Void.Marshal(b, m, deterministic)
}
func (m *Void) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Void.Merge(m, src)
}
func (m *Void) XXX_Size() int {
	return xxx_messageInfo_Void.Size(m)
}
func (m *Void) XXX_DiscardUnknown() {
	xxx_messageInfo_Void.DiscardUnknown(m)
}

var xxx_messageInfo_Void proto.InternalMessageInfo

type Message struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6af9fd695f521f0, []int{1}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Void)(nil), "contextionary.Void")
	proto.RegisterType((*Message)(nil), "contextionary.Message")
}

func init() { proto.RegisterFile("contextionary.proto", fileDescriptor_e6af9fd695f521f0) }

var fileDescriptor_e6af9fd695f521f0 = []byte{
	// 123 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4e, 0xce, 0xcf, 0x2b,
	0x49, 0xad, 0x28, 0xc9, 0xcc, 0xcf, 0x4b, 0x2c, 0xaa, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0xe2, 0x45, 0x11, 0x54, 0x62, 0xe3, 0x62, 0x09, 0xcb, 0xcf, 0x4c, 0x51, 0x52, 0xe6, 0x62, 0xf7,
	0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x15, 0x92, 0xe0, 0x62, 0xcf, 0x85, 0x30, 0x25, 0x18, 0x15,
	0x18, 0x35, 0x38, 0x83, 0x60, 0x5c, 0x23, 0x2f, 0x2e, 0x5e, 0x67, 0x64, 0xdd, 0x42, 0x96, 0x5c,
	0x1c, 0xee, 0xa9, 0x25, 0x1e, 0xa9, 0x39, 0x39, 0xf9, 0x42, 0xc2, 0x7a, 0xa8, 0xd6, 0x81, 0x8c,
	0x95, 0x12, 0x43, 0x13, 0x84, 0xda, 0xa1, 0xc4, 0x90, 0xc4, 0x06, 0x76, 0x8e, 0x31, 0x20, 0x00,
	0x00, 0xff, 0xff, 0x99, 0x89, 0x4c, 0x5f, 0xa5, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ContextionaryClient is the client API for Contextionary service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ContextionaryClient interface {
	GetHello(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Message, error)
}

type contextionaryClient struct {
	cc *grpc.ClientConn
}

func NewContextionaryClient(cc *grpc.ClientConn) ContextionaryClient {
	return &contextionaryClient{cc}
}

func (c *contextionaryClient) GetHello(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/contextionary.Contextionary/GetHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContextionaryServer is the server API for Contextionary service.
type ContextionaryServer interface {
	GetHello(context.Context, *Void) (*Message, error)
}

func RegisterContextionaryServer(s *grpc.Server, srv ContextionaryServer) {
	s.RegisterService(&_Contextionary_serviceDesc, srv)
}

func _Contextionary_GetHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextionaryServer).GetHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contextionary.Contextionary/GetHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextionaryServer).GetHello(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _Contextionary_serviceDesc = grpc.ServiceDesc{
	ServiceName: "contextionary.Contextionary",
	HandlerType: (*ContextionaryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHello",
			Handler:    _Contextionary_GetHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contextionary.proto",
}
